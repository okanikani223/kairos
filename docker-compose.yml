version: '3.8'

services:
  # PostgreSQLデータベース
  postgres:
    image: postgres:16-alpine
    container_name: kairos-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-kairos_db}
      POSTGRES_USER: ${POSTGRES_USER:-kairos_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-kairos_password}
      # タイムゾーン設定
      TZ: Asia/Tokyo
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      # データ永続化
      - postgres_data:/var/lib/postgresql/data
      # 初期化スクリプト（必要に応じて）
      - ./init-db:/docker-entrypoint-initdb.d:ro
    networks:
      - kairos-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-kairos_user} -d ${POSTGRES_DB:-kairos_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Spring Bootアプリケーション
  app:
    build:
      context: ./kairos-backend
      dockerfile: Dockerfile
    image: kairos-app:latest
    container_name: kairos-app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # Spring Profile
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-prod}
      # データベース接続設定
      DATABASE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB:-kairos_db}
      DATABASE_USERNAME: ${POSTGRES_USER:-kairos_user}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-kairos_password}
      # JWT設定
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-86400000}
      # JVMオプション
      JAVA_OPTS: ${JAVA_OPTS:--Xmx512m -Xms256m}
      # タイムゾーン設定
      TZ: Asia/Tokyo
    ports:
      - "${APP_PORT:-8080}:8080"
    networks:
      - kairos-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

# ネットワーク定義
networks:
  kairos-network:
    driver: bridge

# ボリューム定義
volumes:
  postgres_data:
    driver: local