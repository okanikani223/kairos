@startuml report-creation-rules-domain-class-diagram

!define ENTITY class
!define VALUE_OBJECT class
!define ENUM enum
!define INTERFACE interface
!define SERVICE class
!define REPOSITORY interface
!define CONTROLLER class
!define USECASE class

skinparam linetype ortho
skinparam groupInheritance 2

' Color scheme
skinparam class {
  BackgroundColor<<Entity>> #FFE6E6
  BorderColor<<Entity>> #FF6666
  BackgroundColor<<ValueObject>> #E6F3FF
  BorderColor<<ValueObject>> #6699FF
  BackgroundColor<<Enum>> #FFFACD
  BorderColor<<Enum>> #FFD700
  BackgroundColor<<Service>> #E6FFE6
  BorderColor<<Service>> #66FF66
  BackgroundColor<<Repository>> #F0F0F0
  BorderColor<<Repository>> #808080
  BackgroundColor<<Controller>> #FFE6F3
  BorderColor<<Controller>> #FF66B2
  BackgroundColor<<UseCase>> #FFF0E6
  BorderColor<<UseCase>> #FF9966
  BackgroundColor<<Interface>> #E6E6FA
  BorderColor<<Interface>> #9370DB
}

title Report Creation Rules Domain (勤怠表作成ルール管理ドメイン) - クラス図

package "com.github.okanikani.kairos.reportcreationrules" {
  
  ' ===== Domain Models Layer =====
  package "domains.models" #FAFAFA {
    
    package "entities" {
      ENTITY ReportCreationRule <<Entity>> {
        - id: UUID
        - user: User
        - calculationStartDayOfMonth: int
        - timeCalculationUnitInMinutes: int
        --
        + ReportCreationRule(id, user, calculationStartDayOfMonth, timeCalculationUnitInMinutes)
        + update(calculationStartDayOfMonth: int, timeCalculationUnitInMinutes: int): void
        + isOwnedBy(user: User): boolean
        + getCalculationPeriod(yearMonth: YearMonth): Period
        + roundTime(time: LocalTime): LocalTime
        + calculateWorkingMinutes(startTime: LocalTime, endTime: LocalTime): int
        - validateCalculationStartDay(day: int): void
        - validateTimeCalculationUnit(unit: int): void
      }
      
      note right of ReportCreationRule
        **勤怠表作成ルールエンティティ**
        各ユーザーの勤怠表作成に関する設定
        - calculationStartDayOfMonth: 計算開始日（1-28）
        - timeCalculationUnitInMinutes: 時間計算単位（分）
        
        **制約:**
        1ユーザーにつき1つのルールのみ登録可能
        既存ルールがある場合は更新のみ可能
      end note
    }
    
    package "valueobjects" {
      VALUE_OBJECT User <<ValueObject>> {
        - userId: String
        --
        + User(userId: String)
        + equals(other: Object): boolean
        + hashCode(): int
        + toString(): String
      }
      
      VALUE_OBJECT CalculationSettings <<ValueObject>> {
        - startDayOfMonth: int
        - timeUnitInMinutes: int
        --
        + CalculationSettings(startDayOfMonth: int, timeUnitInMinutes: int)
        + calculatePeriod(yearMonth: YearMonth): Period
        + roundToUnit(minutes: int): int
        + isValidStartDay(): boolean
        + isValidTimeUnit(): boolean
        + equals(other: Object): boolean
        + hashCode(): int
        - validateStartDay(day: int): void
        - validateTimeUnit(unit: int): void
      }
      
      VALUE_OBJECT Period <<ValueObject>> {
        - startDate: LocalDate
        - endDate: LocalDate
        --
        + Period(startDate: LocalDate, endDate: LocalDate)
        + contains(date: LocalDate): boolean
        + getDurationInDays(): long
        + getWorkingDays(): List<LocalDate>
        + equals(other: Object): boolean
        + hashCode(): int
        - validatePeriod(): void
      }
      
      note bottom of CalculationSettings
        **計算設定バリューオブジェクト**
        勤怠表の計算方法を定義
        - 月の開始日設定
        - 時間の丸め単位設定
      end note
    }
    
    package "repositories" {
      REPOSITORY ReportCreationRuleRepository <<Repository>> {
        + save(rule: ReportCreationRule): ReportCreationRule
        + findById(id: UUID): Optional<ReportCreationRule>
        + findAll(): List<ReportCreationRule>
        + findByUser(user: User): Optional<ReportCreationRule>
        + delete(id: UUID): void
        + deleteByUser(user: User): void
        + existsByUser(user: User): boolean
        + countAll(): long
      }
    }
  }
  
  ' ===== Domain Services Layer =====
  package "domains.services" #F5F5F5 {
    
    SERVICE ReportCreationRuleDomainService <<Service>> {
      + validateUniqueUserRule(user: User, existingRule: Optional<ReportCreationRule>): void
      + calculateReportPeriod(rule: ReportCreationRule, targetYearMonth: YearMonth): Period
      + roundWorkTime(rule: ReportCreationRule, time: LocalTime): LocalTime
      + calculateTotalWorkMinutes(rule: ReportCreationRule, startTime: LocalTime, endTime: LocalTime, breakMinutes: int): int
      - getStartDateOfMonth(yearMonth: YearMonth, startDay: int): LocalDate
      - getEndDateOfMonth(yearMonth: YearMonth, startDay: int): LocalDate
    }
    
    note right of ReportCreationRuleDomainService
      **勤怠表作成ルールドメインサービス**
      - ユーザー毎の一意性保証
      - 計算期間の算出
      - 時間丸め処理
      - 勤務時間計算
    end note
  }
  
  ' ===== Application Services Layer =====
  package "applications.usecases" #F0F0F0 {
    
    USECASE RegisterReportCreationRuleUseCase <<UseCase>> {
      - repository: ReportCreationRuleRepository
      - domainService: ReportCreationRuleDomainService
      --
      + execute(request: RegisterReportCreationRuleRequest): ReportCreationRule
      - validateRequest(request: RegisterReportCreationRuleRequest): void
      - ensureUniqueUserRule(user: User): void
      - createRule(request: RegisterReportCreationRuleRequest): ReportCreationRule
    }
    
    USECASE FindReportCreationRuleUseCase <<UseCase>> {
      - repository: ReportCreationRuleRepository
      --
      + execute(id: UUID): ReportCreationRule
      + execute(user: User): Optional<ReportCreationRule>
      - validateRuleExists(id: UUID): void
    }
    
    USECASE FindAllReportCreationRulesUseCase <<UseCase>> {
      - repository: ReportCreationRuleRepository
      --
      + execute(): List<ReportCreationRule>
      + execute(pageRequest: PageRequest): Page<ReportCreationRule>
    }
    
    USECASE UpdateReportCreationRuleUseCase <<UseCase>> {
      - repository: ReportCreationRuleRepository
      - domainService: ReportCreationRuleDomainService
      --
      + execute(request: UpdateReportCreationRuleRequest): void
      - validateUpdatePermission(rule: ReportCreationRule, user: User): void
      - validateRequest(request: UpdateReportCreationRuleRequest): void
      - updateRule(rule: ReportCreationRule, request: UpdateReportCreationRuleRequest): void
    }
    
    USECASE DeleteReportCreationRuleUseCase <<UseCase>> {
      - repository: ReportCreationRuleRepository
      --
      + execute(id: UUID, user: User): void
      - validateDeletePermission(rule: ReportCreationRule, user: User): void
    }
    
    USECASE CalculateReportPeriodUseCase <<UseCase>> {
      - repository: ReportCreationRuleRepository
      - domainService: ReportCreationRuleDomainService
      --
      + execute(user: User, targetYearMonth: YearMonth): Period
      - getRuleForUser(user: User): ReportCreationRule
      - useDefaultIfNotExists(user: User): ReportCreationRule
    }
    
    note bottom of CalculateReportPeriodUseCase
      **勤怠表期間計算**
      ユーザーのルール設定に基づいて
      勤怠表の対象期間を計算
      ルールが未設定の場合はデフォルト値を使用
    end note
  }
  
  ' ===== Interface Adapters Layer =====
  package "others" #E8E8E8 {
    
    package "controllers" {
      CONTROLLER ReportCreationRuleController <<Controller>> {
        - registerUseCase: RegisterReportCreationRuleUseCase
        - findUseCase: FindReportCreationRuleUseCase
        - findAllUseCase: FindAllReportCreationRulesUseCase
        - updateUseCase: UpdateReportCreationRuleUseCase
        - deleteUseCase: DeleteReportCreationRuleUseCase
        - calculatePeriodUseCase: CalculateReportPeriodUseCase
        --
        + registerRule(request: RegisterReportCreationRuleDto, auth: Authentication): ResponseEntity<ReportCreationRuleDto>
        + getRule(id: UUID, auth: Authentication): ResponseEntity<ReportCreationRuleDto>
        + getUserRule(auth: Authentication): ResponseEntity<ReportCreationRuleDto>
        + getAllRules(auth: Authentication): ResponseEntity<List<ReportCreationRuleDto>>
        + updateRule(id: UUID, request: UpdateReportCreationRuleDto, auth: Authentication): ResponseEntity<Void>
        + deleteRule(id: UUID, auth: Authentication): ResponseEntity<Void>
        + calculatePeriod(yearMonth: String, auth: Authentication): ResponseEntity<PeriodDto>
      }
      
      note right of ReportCreationRuleController
        **RESTful API エンドポイント**
        - POST /api/report-creation-rules
        - GET /api/report-creation-rules/{id}
        - GET /api/report-creation-rules/user
        - GET /api/report-creation-rules
        - PUT /api/report-creation-rules/{id}
        - DELETE /api/report-creation-rules/{id}
        - GET /api/report-creation-rules/period/{yearMonth}
      end note
    }
    
    package "repositories" {
      SERVICE JpaReportCreationRuleRepository <<Service>> {
        - entityManager: EntityManager
        --
        + save(rule: ReportCreationRule): ReportCreationRule
        + findById(id: UUID): Optional<ReportCreationRule>
        + findAll(): List<ReportCreationRule>
        + findByUser(user: User): Optional<ReportCreationRule>
        + delete(id: UUID): void
        + deleteByUser(user: User): void
        + existsByUser(user: User): boolean
        + countAll(): long
        - buildUserQuery(user: User): CriteriaQuery<ReportCreationRule>
      }
      
      SERVICE InMemoryReportCreationRuleRepository <<Service>> {
        - rules: Map<UUID, ReportCreationRule>
        --
        + save(rule: ReportCreationRule): ReportCreationRule
        + findById(id: UUID): Optional<ReportCreationRule>
        + findAll(): List<ReportCreationRule>
        + findByUser(user: User): Optional<ReportCreationRule>
        + delete(id: UUID): void
        + deleteByUser(user: User): void
        + existsByUser(user: User): boolean
        - filterByUser(user: User): Optional<ReportCreationRule>
      }
    }
    
    package "mappers" {
      SERVICE ReportCreationRuleMapper <<Service>> {
        + {static} toDto(rule: ReportCreationRule): ReportCreationRuleDto
        + {static} toDtoList(rules: List<ReportCreationRule>): List<ReportCreationRuleDto>
        + {static} toEntity(dto: RegisterReportCreationRuleDto, user: User): ReportCreationRule
        + {static} toPeriodDto(period: Period): PeriodDto
      }
    }
    
    package "configurations" {
      SERVICE DefaultReportCreationRuleConfiguration <<Service>> {
        + {static} DEFAULT_CALCULATION_START_DAY: int = 1
        + {static} DEFAULT_TIME_CALCULATION_UNIT_MINUTES: int = 15
        + {static} VALID_CALCULATION_START_DAY_RANGE: Range<Integer> = 1..28
        + {static} VALID_TIME_UNIT_VALUES: List<Integer> = [1, 5, 10, 15, 30, 60]
        --
        + createDefaultRule(user: User): ReportCreationRule
        + isValidCalculationStartDay(day: int): boolean
        + isValidTimeCalculationUnit(unit: int): boolean
      }
    }
  }
  
  ' ===== External Integration =====
  package "integration" #F5F5F5 {
    
    note as IntegrationNote
      **他ドメインとの連携**
      
      1. **Reports Domain連携**
         - 勤怠表生成時の期間計算
         - 時間丸め処理の提供
         - ReportPeriodCalculator の実装支援
      
      2. **Users Domain連携**
         - ユーザー毎のルール設定管理
         - ユーザー認証・認可
      
      3. **Security Module連携**
         - データアクセス制御
         - ユーザー権限検証
    end note
  }
}

' ===== Relationships =====

' Entity relationships
ReportCreationRule --> User : owner
ReportCreationRule --> CalculationSettings : has
CalculationSettings --> Period : "creates"

' Domain Service relationships
ReportCreationRuleDomainService ..> ReportCreationRule : validates
ReportCreationRuleDomainService ..> CalculationSettings : uses
ReportCreationRuleDomainService ..> Period : creates

' Use Case relationships
RegisterReportCreationRuleUseCase ..> ReportCreationRuleRepository : uses
RegisterReportCreationRuleUseCase ..> ReportCreationRuleDomainService : uses
RegisterReportCreationRuleUseCase ..> ReportCreationRule : creates

FindReportCreationRuleUseCase ..> ReportCreationRuleRepository : uses
FindAllReportCreationRulesUseCase ..> ReportCreationRuleRepository : uses

UpdateReportCreationRuleUseCase ..> ReportCreationRuleRepository : uses
UpdateReportCreationRuleUseCase ..> ReportCreationRuleDomainService : uses

DeleteReportCreationRuleUseCase ..> ReportCreationRuleRepository : uses

CalculateReportPeriodUseCase ..> ReportCreationRuleRepository : uses
CalculateReportPeriodUseCase ..> ReportCreationRuleDomainService : uses
CalculateReportPeriodUseCase ..> Period : creates

' Controller relationships
ReportCreationRuleController ..> RegisterReportCreationRuleUseCase : uses
ReportCreationRuleController ..> FindReportCreationRuleUseCase : uses
ReportCreationRuleController ..> FindAllReportCreationRulesUseCase : uses
ReportCreationRuleController ..> UpdateReportCreationRuleUseCase : uses
ReportCreationRuleController ..> DeleteReportCreationRuleUseCase : uses
ReportCreationRuleController ..> CalculateReportPeriodUseCase : uses

' Repository implementations
JpaReportCreationRuleRepository ..|> ReportCreationRuleRepository : implements
InMemoryReportCreationRuleRepository ..|> ReportCreationRuleRepository : implements

' Mapper relationships
ReportCreationRuleMapper ..> ReportCreationRule : maps
ReportCreationRuleMapper ..> Period : maps

' Configuration relationships
DefaultReportCreationRuleConfiguration ..> ReportCreationRule : creates

' Legend
legend right
  |= 記号 |= 意味 |
  | <<Entity>> | エンティティ |
  | <<ValueObject>> | バリューオブジェクト |
  | <<Service>> | ドメインサービス |
  | <<UseCase>> | ユースケース |
  | <<Repository>> | リポジトリインターフェース |
  | <<Controller>> | RESTコントローラー |
  
  **重要制約:**
  1ユーザーにつき1つのルールのみ
  計算開始日は1-28日の範囲
  時間計算単位は1,5,10,15,30,60分から選択
endlegend

@enduml